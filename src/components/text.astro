---
import { cn } from "@/utils/classname";
import { cva, type VariantProps } from "class-variance-authority";

const textStyles = cva([], {
  variants: {
    variant: {
      h1: ["text-3xl font-bold"],
      h2: ["text-2xl font-bold"],
      h3: ["text-xl font-bold"],
      h4: ["text-base font-bold"],
      p: ["text-base pb-3"],
      span: ["text-sm"],
    },
  },
});

type TextVariants = VariantProps<typeof textStyles>["variant"];

type Props = {
  class?: string;
  variant?: TextVariants;
};

// need to spred props as using classs directly in Astro will cause a type error
const { variant = "p", ...props } = Astro.props;

const getHtmlElementFromVariant = (variant: TextVariants) => {
  switch (variant) {
    case "h1":
      return "h1";
    case "h2":
      return "h2";
    case "h3":
      return "h3";
    case "h4":
      return "h4";
    case "p":
      return "p";
    case "span":
      return "span";
    default:
      return "p";
  }
};

const Element = getHtmlElementFromVariant(variant);
---

<>
  <Element class={cn(textStyles({ variant }), props.class)}>
    <slot />
  </Element>
</>
